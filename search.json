[{"path":"https://oekofor.github.io/ecopiapi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Guenther. Author, maintainer.","code":""},{"path":"https://oekofor.github.io/ecopiapi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guenther F (2025). ecopiapi: R package interact ecopi API. R package version 0.2.11, https://github.com/OekoFor/ecopiapi.","code":"@Manual{,   title = {ecopiapi: R package to interact with the ecopi API},   author = {Felix Guenther},   year = {2025},   note = {R package version 0.2.11},   url = {https://github.com/OekoFor/ecopiapi}, }"},{"path":"https://oekofor.github.io/ecopiapi/index.html","id":"ecopiapi","dir":"","previous_headings":"","what":"R package to interact with the ecopi API","title":"R package to interact with the ecopi API","text":"goal ecopiapi Get, post, patch data ecop API. Find full documentation : https://oekofor.github.io/ecopiapi/","code":""},{"path":"https://oekofor.github.io/ecopiapi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R package to interact with the ecopi API","text":"can install development version ecopiapi GitHub : need Github PAT authentication (privat repo). Install specific version Install latest commit main branch","code":"devtools::install_github(\"OekoFor/ecopiapi@0.1.3\", auth_token = {GITHUB_PAT}) # install.packages(\"devtools\") devtools::install_github(\"OekoFor/ecopiapi\", auth_token = {GITHUB_PAT})"},{"path":"https://oekofor.github.io/ecopiapi/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R package to interact with the ecopi API","text":"interact API, need valid key. recommended store environmental variable .Renviron root directory th project. envar must named ECOPI_API_KEY.","code":"library(ecopiapi) get_detections_list(params = list(\"project_name\" = \"017_neeri\", \"datetime__month\" = 3)) get_latest_detections() get_latest_detections_by_project(project_name = \"017_neeri\") get_latest_detections_by_recorder(recorder_name = \"00000000d76d0bf9\") get_latest_detections_by_recordergroup(project_name = \"053_sion\", recordergroup_name = \"lapwing\") get_recordings_list(params = list(\"project_name\" = \"017_neeri\", \"datetime__month\" = 3))"},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Make API requests to the Ecopi API — ecopi_api","title":"Make API requests to the Ecopi API — ecopi_api","text":"function sends API request Ecopi API specified resource, parameters, optional arguments.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make API requests to the Ecopi API — ecopi_api","text":"","code":"ecopi_api(   resource,   ...,   params = list(),   new_data = list(),   file_path,   base_url = getOption(\"ecopiapi.base_url\", \"https://api.ecopi.de/api/v0.2\") )"},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make API requests to the Ecopi API — ecopi_api","text":"resource character string specifying API resource request. ... Path parameters, point specific resource, passed req_template() function. params Query parameters modify reuqest. new_data named list parameters updated/ patched. file_path path currently important patch image recorder endpoint (Watchout! file_path given, new_data gets ignored (patch multiple types)).","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make API requests to the Ecopi API — ecopi_api","text":"response object httr2 package containing API response.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make API requests to the Ecopi API — ecopi_api","text":"","code":"if (FALSE) { # \\dontrun{ # Send a request to the 'detections' endpoint. Only get detections in the project '017_neeri' response <- ecopi_api(\"GET /detections/\", params = list(\"project\" = \"017_neeri\")) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_error_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract error message from JSON body of an HTTP response — ecopi_error_body","title":"Extract error message from JSON body of an HTTP response — ecopi_error_body","text":"Extract error message JSON body HTTP response","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_error_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract error message from JSON body of an HTTP response — ecopi_error_body","text":"","code":"ecopi_error_body(resp)"},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_error_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract error message from JSON body of an HTTP response — ecopi_error_body","text":"resp HTTP response object.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_error_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract error message from JSON body of an HTTP response — ecopi_error_body","text":"named character vector representing flattened JSON content HTTP response body.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopi_error_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract error message from JSON body of an HTTP response — ecopi_error_body","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming an HTTP response object 'response' with a JSON error body error_body <- ecopi_error_body(response) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopiapi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ecopiapi: R package to interact with the ecopi API — ecopiapi-package","title":"ecopiapi: R package to interact with the ecopi API — ecopiapi-package","text":"Get, post, patch data ecop API.","code":""},{"path":[]},{"path":"https://oekofor.github.io/ecopiapi/reference/ecopiapi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ecopiapi: R package to interact with the ecopi API — ecopiapi-package","text":"Maintainer: Felix Guenther guenther@oekofor.de","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_detections_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","title":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","text":"Wrapper around 'aggregations_project_detections_count' endpoint retrieve count detections project per group(s) specified.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_detections_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","text":"","code":"get_aggregations_project_detections_count(project_name, ...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_detections_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","text":"project_name Name project get count detetcions ... query paramaters. See https://api.ecopi.de/api/v0.2/aggregations/projects/{project_name}/detections_count","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_detections_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","text":"list meta information api request dataframe counts detections specified project per specified group (stored list \"$result\"): https://api.ecopi.de/api/v0.2/aggregations/projects/{project_name}/detections_count.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_detections_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a count of detections per project by default and per group(s) if specified. — get_aggregations_project_detections_count","text":"","code":"# Retrieve a count of detections for a specific project if (FALSE) { # \\dontrun{ get_aggregations_project_detections_count(project_name = \"pam_in_chemnitz\") } # } # Retrieve a count of detections for a specific project per specified group(s), here in the example per recorder and species if (FALSE) { # \\dontrun{ get_aggregations_project_detections_count(project_name = \"pam_in_chemnitz\", group_by = \"recorder_field_id,scientific_name\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_recorder_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","title":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","text":"Wrapper around 'aggregations_project_recorder_time_series' endpoint retrieve count detections & sum recorded minutes per user defined interval recorder project.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_recorder_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","text":"","code":"get_aggregations_project_recorder_time_series(   project_name,   recorder_field_id,   ... )"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_recorder_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","text":"project_name Name project get count detetcions recorder_field_id Recorder field id derive data ... query paramaters. See https://api.ecopi.de/api/v0.2/aggregations/projects/{project_name}/recorders/{recorder_field_id}/time_series","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_recorder_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","text":"list meta information api request dataframe counts detections specified project, recorder number interval (stored list \"$result\"): https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_aggregations_projects_recorders_time_series_retrieve.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_recorder_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count of detections & sum of recorded minutes per user defined interval for a !!recorder!! of a project. — get_aggregations_project_recorder_time_series","text":"","code":"# Retrieve a count of detections for a every 5 minutes from recorder 1 in the PAM chemitz project. (default ) if (FALSE) { # \\dontrun{ get_aggregations_project_recorder_time_series(project_name = \"pam_in_chemnitz\", recorder_field_id =1,interval_unit =\"minute\", interval_size =5) } # }  #$results"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","title":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","text":"Wrapper around 'aggregations_project_time_series' endpoint retrieve count detections & sum recorded minutes per user defined interval project.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","text":"","code":"get_aggregations_project_time_series(project_name, ...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","text":"project_name Name project get count detetcions ... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_aggregations_projects_time_series_retrieve","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","text":"list meta information api request dataframe counts detections specified project interval (stored list \"$result\"): https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_aggregations_projects_recorders_time_series_retrieve.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_aggregations_project_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count of detections & sum of recorded minutes per user defined interval for a project. — get_aggregations_project_time_series","text":"","code":"# Retrieve a count of detections for a every 5 minutes in the PAM chemitz project. if (FALSE) { # \\dontrun{ get_aggregations_project_time_series(project_name = \"pam_in_chemnitz\",interval_unit =\"minute\", interval_size =5) } # }  #$results"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_by_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","title":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","text":"Get data linked URL endpoint (mostly provided gtes)","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_by_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","text":"","code":"get_by_url(full_url, base_url = \"https://api.ecopi.de/api/v0.2\")"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_by_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","text":"full_url URL linked endpoint","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_by_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","text":"Depends input. Mostly data frame requested data.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_by_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a linked URL endpoint (mostly provided from other gtes) — get_by_url","text":"","code":"# Retrieve a ecopiapp release from a linked URL if (FALSE) { # \\dontrun{ get_by_url(\"https://api.ecopi.de/api/v0.2/releases/69/\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections.html","id":null,"dir":"Reference","previous_headings":"","what":"Get detections list. — get_detections","title":"Get detections list. — get_detections","text":"Wrapper around 'detections_list' endpoint retrieve list detections based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get detections list. — get_detections","text":"","code":"get_detections(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get detections list. — get_detections","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_detections_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get detections list. — get_detections","text":"data.frame containing detections match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_detections_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get detections list. — get_detections","text":"","code":"# Retrieve a list of detections for project '017_neeri' that occurred in March (month=3) if (FALSE) { # \\dontrun{ get_detections(project_name = \"017_neeri\", datetime__month = 3) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections_retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Get detections retrieve. — get_detections_retrieve","title":"Get detections retrieve. — get_detections_retrieve","text":"Wrapper around 'Retrieve Detections' endpoint retrieve single detection based uid","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections_retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get detections retrieve. — get_detections_retrieve","text":"","code":"get_detections_retrieve(id_or_uid)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections_retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get detections retrieve. — get_detections_retrieve","text":"id_or_uid database ID UID respective detection","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections_retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get detections retrieve. — get_detections_retrieve","text":"list containing detection match specified query parameters: https://api.ecopi.de/api/v0.2/docsco/#operation/detections_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_detections_retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get detections retrieve. — get_detections_retrieve","text":"","code":"# Retrieve a single detection for a specific uid get_detections_retrieve(id_or_uid = \"64733fbc-7cc8-49f6-adf1-c9ec2d676959\") #> Error in get_ecopiapi_key(): No key found"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalprojects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical projects list. — get_historicalprojects","title":"Get historical projects list. — get_historicalprojects","text":"Wrapper around 'historicalprojects_list' endpoint retrieve list historical projects based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalprojects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical projects list. — get_historicalprojects","text":"","code":"get_historicalprojects(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalprojects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical projects list. — get_historicalprojects","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalprojects_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalprojects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical projects list. — get_historicalprojects","text":"dataframe containing historical projects match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalprojects_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalprojects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical projects list. — get_historicalprojects","text":"","code":"# retrieve a dataframe of all historical projects if (FALSE) { # \\dontrun{ get_historicalprojects() } # }  # Retrieve a list of projects that contain 'red_panda' or 'green_banana' in their name if (FALSE) { # \\dontrun{ get_historicalprojects(project_name__in = c(\"pam_in_chemnitz\")) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecordergroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical recorder groups list. — get_historicalrecordergroups","title":"Get historical recorder groups list. — get_historicalrecordergroups","text":"Wrapper around 'historicalrecordergroups_list' endpoint retrieve list recorder groups based specified query parameters. contains configurations species list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecordergroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical recorder groups list. — get_historicalrecordergroups","text":"","code":"get_historicalrecordergroups(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecordergroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical recorder groups list. — get_historicalrecordergroups","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalrecordergroups_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecordergroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical recorder groups list. — get_historicalrecordergroups","text":"list containing historical recorder groups match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalrecordergroups_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecordergroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical recorder groups list. — get_historicalrecordergroups","text":"","code":"# Retrieve a data frame of historical recorder groups for project 'oekofor' if (FALSE) { # \\dontrun{ get_historicalrecordergroups(project_name = \"oekofor\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecorders.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical recorders list. — get_historicalrecorders","title":"Get historical recorders list. — get_historicalrecorders","text":"Wrapper around 'historicalrecorders_list' endpoint get list recorders based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecorders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical recorders list. — get_historicalrecorders","text":"","code":"get_historicalrecorders(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecorders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical recorders list. — get_historicalrecorders","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalrecorders_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecorders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical recorders list. — get_historicalrecorders","text":"dataframe containing historical recorders match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_historicalrecorders_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_historicalrecorders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical recorders list. — get_historicalrecorders","text":"","code":"# Retrieve a list of historical recorders for project '017_neeri' if (FALSE) { # \\dontrun{ get_historicalrecorders(project_name = \"pam_in_chemnitz\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_mediafile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get media file. — get_mediafile","title":"Get media file. — get_mediafile","text":"Wrapper around 'detections_media_retrieve' endpoint retrieve media file detection.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_mediafile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get media file. — get_mediafile","text":"","code":"get_mediafile(uid)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_mediafile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get media file. — get_mediafile","text":"uid uid specifiy detection. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_detections_media_retrieve","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_mediafile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get media file. — get_mediafile","text":"object type \"httr2_response\". contains raw data body (currently audio image)","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_mediafile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get media file. — get_mediafile","text":"","code":"if (FALSE) { # \\dontrun{ get_mediafile(\"c8c155f9-c05b-4e86-b842-88b80829e36c\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get project info. — get_project_info","title":"Get project info. — get_project_info","text":"Wrapper around 'projects_retrieve' endpoint retrieve information specific project.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get project info. — get_project_info","text":"","code":"get_project_info(project_name)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get project info. — get_project_info","text":"project_name Name project.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get project info. — get_project_info","text":"list containing information specified project: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_projects_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get project info. — get_project_info","text":"function retrieves information specific project, based project name provided 'project_name' parameter.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_project_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get project info. — get_project_info","text":"","code":"# Retrieve information about the '017_neeri' project if (FALSE) { # \\dontrun{ get_project_info(project_name = \"017_neeri\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get projects list. — get_projects","title":"Get projects list. — get_projects","text":"Wrapper around 'projects_list' endpoint retrieve list projects based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get projects list. — get_projects","text":"","code":"get_projects(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get projects list. — get_projects","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_projects_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get projects list. — get_projects","text":"dataframe containing projects match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_projects_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get projects list. — get_projects","text":"","code":"# retrieve a dataframe of all projects if (FALSE) { # \\dontrun{ get_projects() } # }  # Retrieve a list of projects that contain 'red_panda' or 'green_banana' in their name if (FALSE) { # \\dontrun{ get_projects(project_name__in = \"red_panda, green_banana\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordergroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recorder groups list. — get_recordergroups","title":"Get recorder groups list. — get_recordergroups","text":"Wrapper around 'recordergroups_list' endpoint retrieve list recorder groups based specified query parameters. contains configurations species list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordergroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recorder groups list. — get_recordergroups","text":"","code":"get_recordergroups(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordergroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recorder groups list. — get_recordergroups","text":"... query paramaters. Leave empty get recordergroups. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recordergroups_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordergroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recorder groups list. — get_recordergroups","text":"list containing recorder groups match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recordergroups_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordergroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recorder groups list. — get_recordergroups","text":"","code":"# Retrieve a data frame of recorder groups for project 'oekofor' if (FALSE) { # \\dontrun{ get_recordergroups(project_name = \"oekofor\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderlogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recorder logs list. — get_recorderlogs","title":"Get recorder logs list. — get_recorderlogs","text":"Wrapper around 'recorderlogs_list' endpoint retrieve list recorder logs based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderlogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recorder logs list. — get_recorderlogs","text":"","code":"get_recorderlogs(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderlogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recorder logs list. — get_recorderlogs","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorderlogs_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderlogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recorder logs list. — get_recorderlogs","text":"dataframe containing recorder logs match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorderlogs_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderlogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recorder logs list. — get_recorderlogs","text":"","code":"# Retrieve a dataframe of recorder logs for project '017_neeri' if (FALSE) { # \\dontrun{ get_recorderlogs(project_name = \"pam_in_chemnitz\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recorders list. — get_recorders","title":"Get recorders list. — get_recorders","text":"Wrapper around 'recorders_list' endpoint retrieve list recorders based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recorders list. — get_recorders","text":"","code":"get_recorders(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recorders list. — get_recorders","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorders_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recorders list. — get_recorders","text":"dataframe containing recorders match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorders_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recorders list. — get_recorders","text":"","code":"# Retrieve a list of recorders for project '017_neeri' if (FALSE) { # \\dontrun{ get_recorders(project_name = \"017_neerach_ried\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","title":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","text":"Wrapper around 'aggregations_project_recorders_count_detections' endpoint retrieve count detections recorder grouped specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","text":"","code":"get_recorders_count_detections(project_name, ...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","text":"project_name Name project get count detetcions class recorder ... query paramaters. See http://192.168.10.30:8001/api/docs/#tag/v0.2/operation/v0.2_aggregations_project_recorder_recordings_count_detections_retrieve","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","text":"summary containing species counts per recorder within project match specified query parameters: http://192.168.10.30:8001/api/docs/#tag/v0.2/operation/v0.2_aggregations_project_recorder_recordings_count_detections_retrieve.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a count of detections per recorder grouped by given parameters. — get_recorders_count_detections","text":"","code":"# Retrieve a count pre species and recorders. By default, the count is returned for today if (FALSE) { # \\dontrun{ get_recorders_count_detections(project_name = \"pam_in_chemnitz\") } # } # You can specify a start_date and end_date to get a count for specific time interval. # Limit 'countable' detections by setting a confidence threshold if (FALSE) { # \\dontrun{ get_recorders_count_detections(project_name = \"pam_in_chemnitz\", start_datetime = \"2023-01-01\", end_datetime = \"2023-12-31\", min_confidence = 0.85) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections_project_recorder_recordings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","title":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","text":"Wrapper around 'aggregations_project_recorders_count_detections_project_recorder_recordings' endpoint retrieve count detections recorder grouped recording.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections_project_recorder_recordings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","text":"","code":"get_recorders_count_detections_project_recorder_recordings(   project_name,   recorder_field_id,   ... )"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections_project_recorder_recordings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","text":"project_name Name project get count detetcions class recorder recorder_field_id Recorder field ID ... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_aggregations_projects_recorders_recordings_count_detections_retrieve","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections_project_recorder_recordings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","text":"summary containing species counts per recorder per recording within project match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_aggregations_projects_recorders_recordings_count_detections_retrieve.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorders_count_detections_project_recorder_recordings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a count of detections per recorder grouped by rerecording. — get_recorders_count_detections_project_recorder_recordings","text":"","code":"# Retrieve a count of detections for each ecoPi at each recording. (Project x , with 3 ecoPi'S is scheduled to record at 10 times per day. I want to extract a count of detections for each ecoPi and each scheduled recording session ) if (FALSE) { # \\dontrun{ get_recorders_count_detections_project_recorder_recordings(project_name = \"pam_in_chemnitz\", recorder_field_id = 1) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderspeciescounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","title":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","text":"Wrapper around 'meta_project_detections_recorderspeciescounts_retrieve' endpoint retrieve count species detections recorder given project.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderspeciescounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","text":"","code":"get_recorderspeciescounts(project_name, include_validation_status = FALSE, ...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderspeciescounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","text":"project_name Name project get count detetcions class recorder include_validation_status Boolean include validation status response ... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_meta_project_detections_recorderspeciescounts_retrieve","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderspeciescounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","text":"summary containing species counts per recorder within project match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_meta_project_detections_recorderspeciescounts_retrieve.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderspeciescounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a count of detections per species and recorder for a specific project. — get_recorderspeciescounts","text":"","code":"# Retrieve a count pre species and recorders. By default, the count is returned for today if (FALSE) { # \\dontrun{ get_recorderspeciescounts(project_name = \"pam_in_chemnitz\") } # } # You can specify a start_date and end_date to get a count for specific time interval. # Limit 'countable' detections by setting a confidence threshold if (FALSE) { # \\dontrun{ get_recorderspeciescounts(project_name = \"pam_in_chemnitz\", start_date = \"2023-01-01\", end_date = \"2023-12-31\", min_confidence = 0.85) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderstates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recorder states list. — get_recorderstates","title":"Get recorder states list. — get_recorderstates","text":"Wrapper around 'recorderstates_list' endpoint retrieve list recorder states based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderstates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recorder states list. — get_recorderstates","text":"","code":"get_recorderstates(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderstates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recorder states list. — get_recorderstates","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorderstates_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderstates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recorder states list. — get_recorderstates","text":"dataframe containing recorder states match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorderstates_list.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recorderstates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recorder states list. — get_recorderstates","text":"","code":"# Retrieve all recorder states if (FALSE) { # \\dontrun{ get_recorderstates() } # }  # Retrieve a list of recorder states for recorder '00000000d76d0bf9' if (FALSE) { # \\dontrun{ get_recorderstates(recorder_name = \"00000000d76d0bf9\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recordings list. — get_recordings","title":"Get recordings list. — get_recordings","text":"Wrapper around 'recordings_list' endpoint retrieve dataframe recordings based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recordings list. — get_recordings","text":"","code":"get_recordings(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recordings list. — get_recordings","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recordings_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recordings list. — get_recordings","text":"data.frame containing recordings match specified query parameters: https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recordings_list","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/get_recordings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recordings list. — get_recordings","text":"","code":"# Retrieve a list of recordings for project '017_neeri' that occurred in March (month=3) if (FALSE) { # \\dontrun{ get_recordings(project_name = \"017_neeri\", datetime__month = 3) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_detections.html","id":null,"dir":"Reference","previous_headings":"","what":"PATCH detection — patch_detections","title":"PATCH detection — patch_detections","text":"Wrapper around 'detections_partial_update' endpoint update detections parameters based specified query parameters.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_detections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PATCH detection — patch_detections","text":"","code":"patch_detections(..., id_or_uid, file_path)"},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_detections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PATCH detection — patch_detections","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_detections_partial_update id_or_uid database ID UID respective detection file_path Path file upload (Watchout! file_path given, new_data gets ignored (patch multiple types)).","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_detections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PATCH detection — patch_detections","text":"httr2_response","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_detections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PATCH detection — patch_detections","text":"","code":"# Update the parameter confirmed of an example detection if (FALSE) { # \\dontrun{ patch_detections(id_or_uid = \"64733fbc-7cc8-49f6-adf1-c9ec2d676959\", confirmed = \"YES\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_recorders.html","id":null,"dir":"Reference","previous_headings":"","what":"PATCH recorder. — patch_recorders","title":"PATCH recorder. — patch_recorders","text":"Wrapper around 'recorders_partial_update' endpoint update recorders parameters based specified body schema.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_recorders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PATCH recorder. — patch_recorders","text":"","code":"patch_recorders(..., recorder_name, file_path)"},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_recorders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PATCH recorder. — patch_recorders","text":"... query paramaters. See https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_recorders_partial_update. recorder_name name recorder update information . file_path Path file upload (Watchout! file_path given, new_data gets ignored (patch multiple types)).","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_recorders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PATCH recorder. — patch_recorders","text":"httr2_response","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/patch_recorders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PATCH recorder. — patch_recorders","text":"","code":"# Update the parameter description of the recorder 00041aefd7jgg1014 if (FALSE) { # \\dontrun{ patch_recorders(recorder_name = \"008041aefd7ee1015\", description = \"This a recorder ...\", lat = 48) } # } # OR with image if (FALSE) { # \\dontrun{ patch_recorders(recorder_name = \"00041aefd7jgg1014\", description = \"Teeeest ...\", lat = 48, file_path = \"/sample_path/sample.jpeg\") } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/post_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Post a new detection — post_detection","title":"Post a new detection — post_detection","text":"Wrapper around 'detections_create' endpoint. want create new detection include media file, need two steps. First create detection using post_detection() upload mediafile patch_detections() TIP: Assigning uuid posting makes easier patch file.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/post_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post a new detection — post_detection","text":"","code":"post_detection(...)"},{"path":"https://oekofor.github.io/ecopiapi/reference/post_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post a new detection — post_detection","text":"... Find required parameters https://api.ecopi.de/api/docs/#tag/v0.2/operation/v0.2_detections_create","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/post_detection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post a new detection — post_detection","text":"httr2_response","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/post_detection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post a new detection — post_detection","text":"","code":"if (FALSE) { # \\dontrun{ post_detection(   recorder_name = \"000000002e611dde\",   datetime = lubridate::now() |> lubridate::with_tz(tzone = \"UTC\") |> format(\"%Y-%m-%dT%H:%M:%S\") |> paste0(\"Z\") |> as.character(), # lubridate::now(tzone = \"UTC\") |> format(\"%Y-%m-%dT%H:%M:%S%Z\") |> as.character(), # \"2019-08-24T14:15:22Z\",   start = 1,   end = 4,   species_code = \"Frosch\",   confidence = -1 ) } # }"},{"path":"https://oekofor.github.io/ecopiapi/reference/resp_body_json_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert API Response Body to Data Frame — resp_body_json_to_df","title":"Convert API Response Body to Data Frame — resp_body_json_to_df","text":"function takes API response object converts JSON body data frame response contains body. response contain body, warning issued response status code.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/resp_body_json_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert API Response Body to Data Frame — resp_body_json_to_df","text":"","code":"resp_body_json_to_df(api_response)"},{"path":"https://oekofor.github.io/ecopiapi/reference/resp_body_json_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert API Response Body to Data Frame — resp_body_json_to_df","text":"api_response Response object API, expected class httr2_response.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/resp_body_json_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert API Response Body to Data Frame — resp_body_json_to_df","text":"data frame containing JSON content response body exists; otherwise, NULL.","code":""},{"path":"https://oekofor.github.io/ecopiapi/reference/resp_body_json_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert API Response Body to Data Frame — resp_body_json_to_df","text":"","code":"if (FALSE) { # interactive() response <- ecopi_api(\"GET /detections/\", params = list(\"project\" = \"017_neeri\")) resp_body_json_to_df(response) }"},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-0211","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.11","title":"ecopiapi 0.2.11","text":"added aggregations_project_detections_count, can also specify groups like recorder species","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-0210","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.10","title":"ecopiapi 0.2.10","text":"added aggregation endpoint - detection counts per recording .","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-029","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.9","title":"ecopiapi 0.2.9","text":"aggregation endpoint url change adaption","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-028","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.8","title":"ecopiapi 0.2.8","text":"added option set request URL , access dev backend/api","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-027","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.7","title":"ecopiapi 0.2.7","text":"added get_by_url() get linked URL endpoints get functions","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-026","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.6","title":"ecopiapi 0.2.6","text":"added include_validation_status get_recorderSpeciesCounts()","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-025","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.5","title":"ecopiapi 0.2.5","text":"switch backend api v0.2","code":""},{"path":[]},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-023","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.3","title":"ecopiapi 0.2.3","text":"adapted patch_detection() able patch empty/ blank comments (.o.w. deleting old comments)","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-022","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.2","title":"ecopiapi 0.2.2","text":"new function get_detetcions_retrieve()","code":""},{"path":"https://oekofor.github.io/ecopiapi/news/index.html","id":"ecopiapi-021","dir":"Changelog","previous_headings":"","what":"ecopiapi 0.2.1","title":"ecopiapi 0.2.1","text":"return NULL response body empty instead erroring","code":""},{"path":[]}]
